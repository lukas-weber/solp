
#include <catch.hpp>
#include <solp.h>
#include <Eigen/Dense>
TEST_CASE("random matrices") {
SECTION("valid 2x4: 10") {
            solp::result res;
            std::vector<solp::constraint> A;
            std::vector<double> c;

            Eigen::VectorXd sol(4);
                Eigen::VectorXd resx(4);
                A = {{{0.44386323274542566, 0.33367432737426683, 1.4940790731576061, -0.20515826376580087},0.8644361988595057},
{{0.31306770165090136, -0.8540957393017248, -2.5529898158340787, 0.6536185954403606},-0.7421650204064419}};
                c = {-0.609082416303085, -0.8403347068676119, -0.01896857166238389, -0.9613809291948594};res = solp::solve(c, A);
                    sol << 3.8605322694759865e-15, 9.627739143831084, 1.3784326327205165e-15, 11.445277128947138;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-1.1651498407833565, 0.9008264869541871, 0.46566243973045984, -1.5362436862772237},-1.0707526215105425},
{{1.4882521937955997, 1.8958891760305832, 1.1787795711596507, -0.17992483581235091},1.0544517269311366}};
                c = {-1.6809222047688275, -0.5050187510780056, -2.1294993647231304, -0.870535818554615};res = solp::solve(c, A);
                    sol << 9.865563348117104e-16, 2.861462480310812e-16, 1.049470757100762, 1.015107009791443;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{1.9229420264803847, 1.4805147914344243, 1.8675589604265699, 0.9060446582753853},0.947251967773748},
{{-0.8612256850547025, 1.9100649530990337, -0.2680033709513804, 0.8024563957963952},-0.1550100930908342}};
                c = {-1.6408975637323986, -1.2170194885231822, -0.10561264445328787, -2.519282139550544};res = solp::solve(c, A);
                    sol << 0.3876129251743785, 2.231619757741361e-13, 2.1253641724176436e-15, 0.22283094117776175;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{0.8568306119026912, -0.6510255933001469, -1.0342428417844647, 0.681594518281627},-0.35399391125348395},
{{-0.8034096641738411, -0.6895497777502005, -0.45553250351734315, 0.01747915902505673},-1.3749512934180188}};
                c = {-0.46867647883432423, -0.6228293127494283, -0.3252160150647209, -0.8837856587615042};res = solp::solve(c, A);
                    sol << 6.146595974185309e-15, 3.12346975047002e-15, 3.1837807255882304, 4.311666885770338;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{1.4944845444913688, -2.0699850250135325, 0.42625873077810095, 0.6769080350302455},-0.3090129690471222},
{{-0.637437025552229, -0.39727181432879766, -0.13288057758695562, -0.2977908794017283},-1.6760038063299767}};
                c = {-1.1497413930019442, -1.1894962492575898, -0.33340333573350317, -0.47791799481809205};res = solp::solve(c, A);
                    sol << 3.940349840429915e-13, 1.6999791235022907, 7.53044601239674, 7.048274431202398e-13;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-2.0306844677814944, 2.0644928613593194, -0.11054065723247261, 1.0201727117157997},-1.0452533661469547},
{{-0.6920498477843912, 1.5363770542457977, 0.28634368889227957, 0.6088438344754508},1.2111452896827009}};
                c = {-1.413783315052161, -1.0107691601593356, -0.27446352155717557, -0.1749950483048662};res = solp::solve(c, A);
                    sol << 3.5296322173422214, 4.1979620233814246e-11, 2.800891916396854e-12, 6.001254379975731;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-1.3342584714027534, -1.3467175057975553, 0.6937731526901325, -0.1595734381462669},-0.38487980918127546},
{{-0.13370155966843916, 1.0777438059762627, -1.1268258087567435, -0.7306777528648248},0.094351589317074}};
                c = {-0.01572912103564306, -0.5600083793612688, -0.07050194596877858, -0.2902734114003996};res = solp::solve(c, A);
                    sol << 8.830559702555462e-15, 0.4783461643776664, 0.3737782922438978, 7.25165997404049e-14;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{1.1285940645145685, 0.4960009463439622, 0.7714059486768455, 1.0294388287827672},1.5133280825732052},
{{-0.9087632459590531, -0.4243176209779015, 0.8625960113284511, -2.655619092974933},0.553132064207584}};
                c = {-1.8848645922481087, -2.7462518850240882, -4.099934693570646, -0.5104951654142432};res = solp::solve(c, A);
                    sol << 2.6373713378751804e-14, 1.1635815747243816, 1.2136158944163196, 2.3792323772060954e-14;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-0.3474506524985633, -0.5812684768603252, -1.6326345262344952, -1.567767724308454},-1.3322116545945017},
{{-1.1791579306376878, 1.3014280716647608, 0.8952602728899299, 1.3749640663929898},-1.9686246897860202}};
                c = {-0.9532859428024697, -0.07261605961082176, -1.7282593903358028, -1.0596449569794608};res = solp::solve(c, A);
                    sol << 1.9706355256566925, 2.2344384620002657e-11, 0.3966062489524061, 1.2676030487444265e-13;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-0.06727560892298173, -1.3183958696447342, -0.37070400322045344, -0.9456157955562914},-0.44816536268070806},
{{-0.9327409107943778, -1.2630683491022754, 0.45248909263964643, 0.0978961454126271},-0.6493379277303881}};
                c = {-2.0679622993425384, -0.6770617115962438, -2.292249610846227, -0.2052028248133533};res = solp::solve(c, A);
                    sol << 1.1788613617920964, 1.9905989930099683e-16, 0.995016896299913, 1.1538716137798713e-15;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    }
SECTION("valid 3x5: 10") {
            solp::result res;
            std::vector<solp::constraint> A;
            std::vector<double> c;

            Eigen::VectorXd sol(5);
                Eigen::VectorXd resx(5);
                A = {{{0.28219757475842266, -0.840083656846994, -0.9799709936692849, 0.27220219464129114, 1.1494406231346521},0.3053993216030181},
{{-1.4083267932454022, 0.09631078967117178, -0.0471294408074548, -0.8959270535594022, 1.2020742059740546},-1.5298690008040767},
{{-0.24440258748294486, 0.1819830839766874, -1.3384085573599165, -0.5169678032121724, -0.6608337430331365},-0.7053360052884009}};
                c = {-0.705914171512513, -0.4306255138714168, -1.225573010366977, -0.02488408083388604, -1.0050862120823552};res = solp::solve(c, A);
                    sol << 1.8100674431881405, 1.2659223323470423, 7.028821020052384e-13, 2.0943175227944858e-14, 0.7465225466696509;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-1.336613199713874, -0.3416722769337112, 1.4196033068341047, -0.9094156970717192, 0.5909053025753017},-0.8525258196985821},
{{0.20646141742885968, 0.23326884539652581, 0.27068485884333765, -0.24440739600209963, 0.4496126122772567},0.38672990483350433},
{{-1.379050443493529, -1.4981222894407447, 1.9089019428466294, 0.6859794360454973, -1.6197531173603303},0.9107394252473072}};
                c = {-0.42203538706480276, -0.795953776691244, -1.688616630667713, -0.1038176717014564, -1.6148268077597137};res = solp::solve(c, A);
                    sol << 1.242888675671147e-14, 1.4602235509121167e-14, 1.0875482251338418, 4.280467293539196, 2.5322353084077256;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-2.1229506979348813, 1.1247560527249487, 0.11206079121667753, 0.5191412258690565, -0.21094480414911052},-0.299608422895751},
{{-0.9748570469283102, 0.699210125474775, 1.0161952005867616, -0.19765139112905816, 0.3419888237925572},-0.9749809658136417},
{{-0.2474150480350353, 1.5920583406405593, 0.5629199991509807, 0.09105966580930083, 0.8243863386250445},1.9305013511688713}};
                c = {-0.03639709312351117, -1.4702331869779892, -0.697367233920843, -1.5426604907483616, -1.3784166691480997};res = solp::solve(c, A);
                    sol << 2.444473416455996, 1.1827355452757799e-14, 3.0879880508533297, 8.752619734254312, 1.7152405678191358e-15;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-0.6579260925367952, 0.9688826385630508, 0.22558166356880352, 1.3891453156779274, 2.014060154918468},0.43310795315134365},
{{-0.30676577602700456, -0.40630313044506255, -0.8640449911023695, -0.14357951171632055, -0.3820254489503836},-0.4059417271884834},
{{0.35950439957101016, -0.14456681693373594, -0.3615992807816198, 1.0645851361278518, -0.9378802311514517},0.7243685048699644}};
                c = {-0.5715553477229276, -1.5869747430909384, -1.1316780531409278, -2.7784357740841705, -0.9705893943342215};res = solp::solve(c, A);
                    sol << 0.7380759932880692, 0.27622494427597855, 4.330720801818634e-16, 0.4686895224102669, 5.962169878589394e-16;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-0.06205312579833403, 1.2591671296108138, 0.7041110221415822, -1.4956795162570162, 2.5263682403559984},0.4608144771488305},
{{1.7699213881967337, -0.1682142227670741, 0.37791010173847506, 1.3243587499958391, -0.17220079269688263},0.9237965603139469},
{{0.7303517903770194, 1.1045784735714765, -1.014825907734441, -0.6023318535828621, 0.9214083978105813},-0.13256801465371804}};
                c = {-0.3878309049307363, -0.642805482097095, -0.7231263054371574, -0.15133409173775483, -1.247897881691722};res = solp::solve(c, A);
                    sol << 8.677865353083875e-14, 0.7718876849122206, 0.6002415750072569, 0.6243034167439386, 1.8702964379987105e-14;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{1.648504010268179, -1.5500141893581478, -0.45582534779936884, 1.4261587520192662, 0.9361291483110824},-0.13043973378332732},
{{0.6783800988404703, 0.8326507394644783, 0.3270662091210221, 1.6315974275322715, 0.3777591697307179},1.821915097860406},
{{0.23986710589527857, 0.15895867412564327, 0.19286395555038602, -1.1570172808158679, 0.7706730544633433},-0.07565047058842289}};
                c = {-1.3399893612378073, -2.369731012981332, -1.608765316588961, -0.3724129685797905, -0.6900216418737621};res = solp::solve(c, A);
                    sol << 0.17318176301650473, 4.0677950160225225e-13, 2.569405353247849, 0.5295830657646982, 6.965241092278666e-13;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{0.4635397652282402, 0.2384806348807379, -1.6784441780221098, -0.7617099416541063, 0.5748523617353566},-0.16675427628187656},
{{-1.1036364710364543, 0.2960664237320644, -0.77198617885464, 0.5249620090383947, 0.9313190422106503},0.09245470826950498},
{{-1.8261207806653905, -1.2909857812400287, 1.4526330359826523, -1.7305848206615102, -0.1318745917471983},-2.17123686809705}};
                c = {-0.9927971892738392, -1.317299107757328, -2.208289440246549, -4.517932247396302, -1.0872465596383116};res = solp::solve(c, A);
                    sol << 3.425801664025573, 3.6893253603930814e-14, 3.449028259430273, 2.1039614180563948e-14, 7.017892062499451;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-0.7554627263656334, -1.2012015190173893, 0.5232617386880769, -0.5375833685580619, 0.09920486253150243},-1.9585489551365387},
{{1.5762989726277177, 0.5023282400747796, -0.8622669997532367, 0.16066118981977281, -0.9526449528153877},-1.4464210639833286},
{{1.6085221559487237, -0.5615787496032209, 0.20727074697361864, 0.307732574679432, 0.15925046837370244},-0.4523502755690917}};
                c = {-0.3679874005492982, -2.9082887804527493, -0.3483962780984753, -0.43680734996090426, -0.0037166720266386035};res = solp::solve(c, A);
                    sol << 0.3149769499358336, 3.234887287158874, 4.137806671701637, 2.4357829257622034e-13, 2.1616105117965365e-13;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{1.7406294458953309, -0.2934850548893775, 0.917221542115856, -0.05704286766218815, 0.8767267736904524},0.5882249291179367},
{{-1.8269113783045177, -0.40318830684953333, 0.9494055237932187, -0.16325494883317873, -0.08645528271104713},0.2125870464375366},
{{-0.43046191188579297, 1.149379383367124, 0.2975143539549459, 0.04402227617534797, 0.6430545453392927},1.5470314969908445}};
                c = {-3.856445499987714, -0.504486690647339, -0.9211618216751525, -0.06546588919587343, -0.5273911609389018};res = solp::solve(c, A);
                    sol << 8.859790109033371e-14, 0.9439097321954871, 1.123831821038278, 2.902280934914364, 6.884171061046952e-13;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    A = {{{-0.4900679256527415, 0.60745272915306, 1.919989755134842, -1.273889719662718, 0.4328756012909587},-0.7096699064189013},
{{0.04160665963720389, 1.14194538826727, 0.858413027971515, -0.08208935427480223, 0.44800406191822506},2.0233909866676516},
{{-0.3995448900301614, -0.12667725628910567, -0.5669498351017513, -0.681252865869426, 0.5712954617991547},0.43311850150243736}};
                c = {-1.717369290146393, -0.26237038815790387, -0.39441232550726496, -1.2322360296820885, -0.49882944303953114};res = solp::solve(c, A);
                    sol << 4.3778308556440795, 1.2478607725551646e-15, 2.5739462642478687e-15, 0.2873859220091487, 4.1625412615419695;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    }
SECTION("valid 10x20: 1") {
            solp::result res;
            std::vector<solp::constraint> A;
            std::vector<double> c;

            Eigen::VectorXd sol(20);
                Eigen::VectorXd resx(20);
                A = {{{0.10565671253274102, -0.13746591502551814, -1.286182324049264, 0.5849096659729595, 1.8646203738782798,
-1.6820768289699206, -0.9834036920971483, 1.3807745162098592, -1.2435959470049562, -1.6130899765686892,
-0.7388973804663528, 2.224263029872842, -0.41542941869414457, -1.7480730942837779, -0.2249363261276494,
-0.7993203186086799, 0.6460397698674203, 0.17660461931974933, -1.6437238563294319, -0.011055097065701824},0.21226465319485585},
{{-1.447640303349023, -0.2804416941288465, 1.2617327256866104, -0.23557769259492195, -1.6873001064665873,
0.8121862912897531, -1.6272295491910602, 0.7626906483333635, 0.141413269314851, -0.9910776510290491, 0.8963002826056967,
1.4895867698486922, -0.7519250237354345, -0.11402069821187777, -0.23973811459406275, 1.8317588648244898,
0.9710619403037791, -2.138955601419981, -1.138137136723301, -0.7534425554731929},-1.01290658679486},
{{-1.2349971760315477, -0.9838739462360611, 0.786929028777058, 0.7393561815663979, -0.901081522978476,
-0.11838832028694092, -1.5193795658715188, 1.0234062857244732, 0.4929726801967543, -0.5983226541455308,
-0.8546621748142761, -0.9928487119692782, 0.8580879329236824, 0.8566496151370059, 0.3198273618112008,
-0.2430842820521078, 0.2529213278764251, -0.47921618990908593, -1.4864949950429172, 1.455532251640982},-0.56531584409397},
{{1.3306303062994627, 1.200023959735597, -1.255648252993738, 0.47221684753686144, 0.7385763859920313,
-0.37889353857800273, -0.47375394781260355, 0.9722071523150618, -0.9189504763867404, 0.6632404961116564,
-0.13349139964644902, -1.566370336292092, -1.748651442808063, -1.1225919373983972, 0.798550810998684,
-0.08809313495944868, -0.21782624834753048, 0.3675931736653034, -2.1636779759927927, 1.5768372104443855},0.13056589322792755},
{{0.03329115010703631, -0.6151152939855741, 0.7404027771009377, 0.7260823791464867, -0.8314466869283318,
0.6558555610677919, -0.30277615520204626, -1.3855255785327478, 0.08396813037362459, -0.891427808165999,
-1.5680286496663363, -0.6328111988583075, -0.1193251281968275, 0.28325032542013867, 0.2091138911996732,
0.0765040264927729, 1.0707458813766755, 1.1313108651694717, 0.6235074633170804, 1.178459423043174},0.2739067760032025},
{{-1.4363331230838927, -0.490520533288454, 0.12482685384354879, 0.3911684305251009, 0.209947789113337,
-1.4990891645065416, 0.5412989245746744, -1.171077824446728, 1.218729669363644, 0.6991159889970759, 1.2686791527984247,
0.098425750442268, 0.10252703263507736, 1.6023763146637362, 0.3297880813555394, -0.9317253977561654, -1.277725913633678,
1.5729357207285526, 0.7261554916431956, -2.745665404855028},0.7412998156824082},
{{2.269012824701639, -0.4050147480806727, 1.78086881009362, 1.9016879521922576, -0.3218570054772972, -0.2043680093033699,
0.14897656177978344, -1.4593832707693155, -1.5017405859816275, -0.8670357105287108, 0.21262376099176947,
1.3351058527412414, 1.6312758863348829, 1.63044451426633, -0.43809425161244553, -1.365091351496299, -1.4511770945347908,
1.0316030694532914, 0.8142898964475218, -1.6095171839648763},0.06156683207399878},
{{0.7330581030585158, -0.3812020258567777, 0.577218712908935, -1.0423914071376688, -1.7273219126147754,
-0.056855532951169595, 1.2256610180634853, 1.6008268936080785, 0.4206520201462191, -0.5724737216202015,
-0.2653441678826056, 0.5704436983443569, -0.26285265872420915, -0.7718463656010665, -0.12774515652861246,
1.1820430310804808, 0.47248008736499786, 1.4606692800234315, 0.04915029228377404, 0.40959411944696916},-0.46687530835285307},
{{-0.5304942031264823, 1.3007169121483508, -1.6952812487625322, -0.37566904263143996, 0.3484024563859257,
-1.6185001621773156, -0.1921009714017295, 0.07084759651608444, 2.435728505209941, 0.9716811975751055,
-0.9329622079926991, 2.8652035405143534, -1.7920479933488889, 0.5449343866619168, 2.4494491677910926,
0.017083479268107382, -1.396088082736664, 0.5912993638749305, 0.7908233899916132, -0.21011952594592193},2.5491123419806105},
{{1.0908360564333195, 0.9109295775117167, 0.10535182698480468, 0.9273505370304073, 0.8930205209727146, 0.537803804730489,
-0.6903609564287765, -1.1878530082002492, -0.49418724633876304, 1.1770657515891572, 1.0582617810751134,
0.5110420529437091, 0.5188018148787893, 1.3615533415507914, -0.21382382307074327, 0.44885412886492, 1.4647056544751271,
-0.3835515246378715, 0.7276459819993624, 1.1939560086748437},1.0991567309398476}};
                c = {-1.5000256262387464, -1.5289702417526054, -0.35413644882842454, -0.588124571589497, -0.7104251722477282,
-0.005279912790904534, -2.097934321029085, -0.6890789568867345, -0.8654056641890637, -0.26379951859968626,
-1.4962842566990155, -0.44849293131801043, -1.1530638963762112, -0.7252839413236312, -1.859749577076246,
-0.7585996198873727, -1.855437470484016, -0.4001471671406932, -0.4309156554078059, -1.2326370903421513};res = solp::solve(c, A);
                    sol << 9.568722748434534e-16, 2.8730228359969026e-15, 1.041805252144835, 4.619706515532853e-15, 1.175920598430938,
3.339411024636234e-14, 0.5343090031700215, 0.005691321328688379, 0.13768083311625598, 1.0971194243922094e-15,
0.0173279312112104, 0.13262193233301167, 2.5983530898266107e-15, 1.0911698670615463e-15, 1.5675673587788286,
0.1604046053073721, 0.3823417768696476, 1.4428661322770756e-15, 2.395562974797039e-15, 9.550125796139059e-16;
                    resx = Eigen::Map<Eigen::VectorXd>(res.x.data(), res.x.size());
                    
                    CHECK(sol.isApprox(resx, 1.0e-8));
                    }
SECTION("unbounded 3x5: 5") {
            solp::result res;
            std::vector<solp::constraint> A;
            std::vector<double> c;

            A = {{{-0.1778103936485962, -1.085025119015919, 0.9722623328412471, 1.4314716840449928, -0.2450730432591931},1.011555448987993},
{{-0.6232538101120374, -0.39599886600563744, -1.35852240228175, 1.3226025276669688, 0.0034439384342185293},1.5132355220559772},
{{-0.0001967701085504745, 1.533703955410446, -0.7730822478242712, -0.40125493717108385, -0.11535676437265875},0.9170686211979239}};
                c = {-1.3662452166522163, -1.7339273050041153, -0.6744608957053032, -0.5678338558180801, -1.3979994942813643};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::unbounded);
                    }
                    A = {{{-0.1092956384044389, 0.3343361147263713, -0.44202287795198886, 0.31670249810224016, -0.4912528096498179},1.174166606452684},
{{-0.3296676740595812, 0.9707205226591052, 0.2494843869667214, 0.36643091710350495, -0.766504009673194},0.35738592980048145},
{{1.1845297855396775, 0.2631611500506635, -1.837512830668673, -0.1697991785678925, -3.275169408881945},0.14976200445084123}};
                c = {-0.4566713153643219, -0.8458433212482265, -0.43882247491542636, -0.8159476801265313, -2.437280555802748};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::unbounded);
                    }
                    A = {{{0.5727068882765648, -1.1307304807437515, -0.21263406545189792, 0.9141866483613167, 1.0289264252738954},-1.0827175677056873},
{{-0.933654079772615, 0.9685837215023437, -0.44682556174194377, -1.3155292863339458, 0.966465765089759},-0.6172372167137222},
{{-0.1305926687538433, -0.1409974147889999, -0.2777955239474348, 0.1934855082911813, 0.2790493984869386},-0.9062940133020448}};
                c = {-0.5131391288019035, -1.1857861057107235, -1.418852782185773, -0.9866208085453712, -0.735692741144478};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::unbounded);
                    }
                    A = {{{2.3683567754407537, 0.498243117407781, -0.3625016269809264, -1.740230595066944, -1.1604846860033653},0.4930929857506328},
{{-0.012434271806311438, -0.07711253522499298, 1.2629164717815833, 0.23552804948632702, -1.0599642839506642},0.7483560935990895},
{{-1.4503680871515794, 0.19688042925643898, -0.37458191443485594, -0.6852248901469723, 1.8013814338456813},2.18405896331061}};
                c = {-0.05941917773647521, -0.8086851886111546, -0.39631482085625, -1.6628844514896797, -0.43792217616526713};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::unbounded);
                    }
                    A = {{{0.8981290941433416, -0.34180116675856204, 0.4376186121738459, -0.8193335295358799, 0.7731699545546785},-0.2589460322679475},
{{0.35169020525130446, 2.364206054536199, -1.3887287054704989, -0.3825967078410718, 0.6642029229464995},-0.07104179366616178},
{{-0.8499180299877973, 0.8090372653435869, -0.08872948437780816, -0.7657515260337728, 0.40940073992721343},-0.2994653605854804}};
                c = {-0.5308545201110748, -4.5406848457489835, -0.5053037415790097, -1.167446099769759, -0.013898627127521164};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::unbounded);
                    }
                    }
SECTION("infeasible 3x5: 5") {
            solp::result res;
            std::vector<solp::constraint> A;
            std::vector<double> c;

            A = {{{0.4931244892295, -0.8836599061246422, -1.2861915179958308, 0.6278841036138496, 0.5298740749650077},-1.0789267490581038},
{{-1.4413780072934055, -0.2835259742669586, -0.5337915583135024, -0.5376721396720884, 0.20810730857843468},0.11252103045759125},
{{0.979997946816357, 2.2777760091897155, 1.2127616969168056, 0.5642753014033415, 0.03544852349154675},-0.21529854976740825}};
                c = {-0.8830198085738571, -1.0672407639835202, -2.876233486165009, -0.5960995194502917, -0.3849525686579513};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::infeasible);
                    }
                    A = {{{0.7817328833671743, -0.23053532141134225, 0.3204836684476559, 0.05076727815880229, 0.11279857675247197},-1.8372847740223832},
{{0.522897935560316, 0.7631043123542477, -0.2581055932103572, 1.7445200742667781, -0.42977109481810294},0.3642683151965522},
{{-0.8840992327131004, -0.059553420575399224, 2.3298995918332386, 0.1295718808264742, -0.306144503099468},1.4832453953035236}};
                c = {-2.0946348737546416, -0.15939593970089483, -1.9145309392852936, -1.6063826991349281, -1.5148135744205515};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::infeasible);
                    }
                    A = {{{1.1778600358688505, -0.12927016729296925, 0.9529183115063581, -0.6711023816686469, -0.32001032005591257},-0.8360955672276745},
{{-1.3289462199813051, -0.008357612572208881, 0.04670863923167861, -1.9238944041354353, -1.4861351575493829},-0.0680486846238767},
{{0.09858041222000684, 1.0570246387518738, -1.417251566166086, -1.3298442070111178, -0.1828227535194408},0.1884557392962985}};
                c = {-0.3857428583684925, -0.5721286462687436, -2.174020233120485, -0.7379893814024263, -0.5833623060425357};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::infeasible);
                    }
                    A = {{{-1.6213695432065827, 0.43404407142141144, 1.3481116431047484, -1.2926946742625736, 0.3220206621237504},1.2268142310434271},
{{-0.6569662129609957, 1.641913318737707, 0.16431164018135963, -0.013228393211636841, -1.833310938194116},-0.2209423192153699},
{{-0.934602614981761, -0.9406162964317335, -0.9235872915632592, 0.6504324080414946, 0.10446877562247231},-0.23840833567477895}};
                c = {-2.8592273071483834, -1.580272589723613, -0.4598183597279373, -0.22693159354938544, -2.6175394737737125};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::infeasible);
                    }
                    A = {{{0.7478310464140577, 0.19476617655294703, -0.8800580559365947, 0.6008171404566799, -0.9048006234315492},-1.160311591183959},
{{-1.1050734742701278, -1.3154472412154878, -0.24764296114838302, -0.5046590013634574, -1.2072981101233007},-0.4596720313741896},
{{0.7109957000464404, 1.3881469317239905, 1.5933200032438395, -0.7277466681202588, -0.6814464957783749},3.0190524504069436}};
                c = {-1.5281868006600992, -0.2586000732689362, -1.997291816805963, -1.6913077194186885, -0.5108416200960141};CHECK_THROWS(solp::solve(c, A));
                    try {
                        solp::solve(c, A);
                    } catch(const solp::exception &e) {
                        e.what();
                        CHECK(e.status == solp::exception::type::infeasible);
                    }
                    }
}
