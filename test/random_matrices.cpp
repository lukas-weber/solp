// generated by lpgen.py
#include "helpers.h"
#include <Eigen/Dense>
#include <catch2/catch.hpp>
#include <solp.h>
TEST_CASE("random matrices") {
	SECTION("valid 2x4: 10") {
		solp::result res;
		std::vector<solp::constraint> A;
		std::vector<double> c;

		A = {{{0.44386323274542566, 0.33367432737426683, 1.4940790731576061, -0.20515826376580087},
		      0.8644361988595057},
		     {{0.31306770165090136, -0.8540957393017248, -2.5529898158340787, 0.6536185954403606},
		      -0.7421650204064419}};
		c = {-0.609082416303085, -0.8403347068676119, -0.01896857166238389, -0.9613809291948594};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{3.86053227125357e-15, 9.627739143831088,
		                                          1.3784326333698431e-15, 11.445277128947145})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{3.86053227125357e-15, 9.627739143831088,
		                                          1.3784326333698431e-15, 11.445277128947145})
		                      .margin(1e-10));
		A = {{{-1.1651498407833565, 0.9008264869541871, 0.46566243973045984, -1.5362436862772237},
		      -1.0707526215105425},
		     {{1.4882521937955997, 1.8958891760305832, 1.1787795711596507, -0.17992483581235091},
		      1.0544517269311366}};
		c = {-1.6809222047688275, -0.5050187510780056, -2.1294993647231304, -0.870535818554615};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{9.86556332755201e-16, 2.8614624743253046e-16,
		                                          1.049470757100762, 1.0151070097914416})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{9.86556332755201e-16, 2.8614624743253046e-16,
		                                          1.049470757100762, 1.0151070097914416})
		                      .margin(1e-10));
		A = {{{1.9229420264803847, 1.4805147914344243, 1.8675589604265699, 0.9060446582753853},
		      0.947251967773748},
		     {{-0.8612256850547025, 1.9100649530990337, -0.2680033709513804, 0.8024563957963952},
		      -0.1550100930908342}};
		c = {-1.6408975637323986, -1.2170194885231822, -0.10561264445328787, -2.519282139550544};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.3876129251743783, 2.2316197725743171e-13,
		                                          2.1253641864284215e-15, 0.22283094117776173})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.3876129251743783, 2.2316197725743171e-13,
		                                          2.1253641864284215e-15, 0.22283094117776173})
		                      .margin(1e-10));
		A = {{{0.8568306119026912, -0.6510255933001469, -1.0342428417844647, 0.681594518281627},
		      -0.35399391125348395},
		     {{-0.8034096641738411, -0.6895497777502005, -0.45553250351734315, 0.01747915902505673},
		      -1.3749512934180188}};
		c = {-0.46867647883432423, -0.6228293127494283, -0.3252160150647209, -0.8837856587615042};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{6.146595976370152e-15, 3.123469751493526e-15,
		                                          3.1837807255882153, 4.311666885770343})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{6.146595976370152e-15, 3.123469751493526e-15,
		                                          3.1837807255882153, 4.311666885770343})
		                      .margin(1e-10));
		A = {{{1.4944845444913688, -2.0699850250135325, 0.42625873077810095, 0.6769080350302455},
		      -0.3090129690471222},
		     {{-0.637437025552229, -0.39727181432879766, -0.13288057758695562, -0.2977908794017283},
		      -1.6760038063299767}};
		c = {-1.1497413930019442, -1.1894962492575898, -0.33340333573350317, -0.47791799481809205};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{3.9403499093958414e-13, 1.6999791235022907,
		                                          7.530446012396735, 7.048274554417272e-13})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{3.9403499093958414e-13, 1.6999791235022907,
		                                          7.530446012396735, 7.048274554417272e-13})
		                      .margin(1e-10));
		A = {{{-2.0306844677814944, 2.0644928613593194, -0.11054065723247261, 1.0201727117157997},
		      -1.0452533661469547},
		     {{-0.6920498477843912, 1.5363770542457977, 0.28634368889227957, 0.6088438344754508},
		      1.2111452896827009}};
		c = {-1.413783315052161, -1.0107691601593356, -0.27446352155717557, -0.1749950483048662};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{3.529632217342222, 4.1979619538927265e-11,
		                                          2.8008918697738697e-12, 6.00125437997573})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{3.529632217342222, 4.1979619538927265e-11,
		                                          2.8008918697738697e-12, 6.00125437997573})
		                      .margin(1e-10));
		A = {{{-1.3342584714027534, -1.3467175057975553, 0.6937731526901325, -0.1595734381462669},
		      -0.38487980918127546},
		     {{-0.13370155966843916, 1.0777438059762627, -1.1268258087567435, -0.7306777528648248},
		      0.094351589317074}};
		c = {-0.01572912103564306, -0.5600083793612688, -0.07050194596877858, -0.2902734114003996};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{8.830559677548544e-15, 0.478346164377666,
		                                          0.3737782922439006, 7.251659916375994e-14})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{8.830559677548544e-15, 0.478346164377666,
		                                          0.3737782922439006, 7.251659916375994e-14})
		                      .margin(1e-10));
		A = {{{1.1285940645145685, 0.4960009463439622, 0.7714059486768455, 1.0294388287827672},
		      1.5133280825732052},
		     {{-0.9087632459590531, -0.4243176209779015, 0.8625960113284511, -2.655619092974933},
		      0.553132064207584}};
		c = {-1.8848645922481087, -2.7462518850240882, -4.099934693570646, -0.5104951654142432};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{2.637371337684834e-14, 1.1635815747243812,
		                                          1.2136158944163196, 2.379232376937401e-14})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{2.637371337684834e-14, 1.1635815747243812,
		                                          1.2136158944163196, 2.379232376937401e-14})
		                      .margin(1e-10));
		A = {{{-0.3474506524985633, -0.5812684768603252, -1.6326345262344952, -1.567767724308454},
		      -1.3322116545945017},
		     {{-1.1791579306376878, 1.3014280716647608, 0.8952602728899299, 1.3749640663929898},
		      -1.9686246897860202}};
		c = {-0.9532859428024697, -0.07261605961082176, -1.7282593903358028, -1.0596449569794608};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.970635525656691, 2.2344383475017376e-11,
		                                          0.3966062489524061, 1.267602962732785e-13})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.970635525656691, 2.2344383475017376e-11,
		                                          0.3966062489524061, 1.267602962732785e-13})
		                      .margin(1e-10));
		A = {
		    {{-0.06727560892298173, -1.3183958696447342, -0.37070400322045344, -0.9456157955562914},
		     -0.44816536268070806},
		    {{-0.9327409107943778, -1.2630683491022754, 0.45248909263964643, 0.0978961454126271},
		     -0.6493379277303881}};
		c = {-2.0679622993425384, -0.6770617115962438, -2.292249610846227, -0.2052028248133533};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.1788613617920853, 1.9905991122091886e-16,
		                                          0.9950168962999225, 1.1538716828734602e-15})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.1788613617920853, 1.9905991122091886e-16,
		                                          0.9950168962999225, 1.1538716828734602e-15})
		                      .margin(1e-10));
	}
	SECTION("valid 3x5: 20") {
		solp::result res;
		std::vector<solp::constraint> A;
		std::vector<double> c;

		A = {{{0.28219757475842266, -0.840083656846994, -0.9799709936692849, 0.27220219464129114,
		       1.1494406231346521},
		      0.3053993216030181},
		     {{-1.4083267932454022, 0.09631078967117178, -0.0471294408074548, -0.8959270535594022,
		       1.2020742059740546},
		      -1.5298690008040767},
		     {{-0.24440258748294486, 0.1819830839766874, -1.3384085573599165, -0.5169678032121724,
		       -0.6608337430331365},
		      -0.7053360052884009}};
		c = {-0.705914171512513, -0.4306255138714168, -1.225573010366977, -0.02488408083388604,
		     -1.0050862120823552};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.8100674431881405, 1.2659223323470423,
		                                          7.028820990872624e-13, 2.094317514166443e-14,
		                                          0.7465225466696509})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.8100674431881405, 1.2659223323470423,
		                                          7.028820990872624e-13, 2.094317514166443e-14,
		                                          0.7465225466696509})
		                      .margin(1e-10));
		A = {{{-1.336613199713874, -0.3416722769337112, 1.4196033068341047, -0.9094156970717192,
		       0.5909053025753017},
		      -0.8525258196985821},
		     {{0.20646141742885968, 0.23326884539652581, 0.27068485884333765, -0.24440739600209963,
		       0.4496126122772567},
		      0.38672990483350433},
		     {{-1.379050443493529, -1.4981222894407447, 1.9089019428466294, 0.6859794360454973,
		       -1.6197531173603303},
		      0.9107394252473072}};
		c = {-0.42203538706480276, -0.795953776691244, -1.688616630667713, -0.1038176717014564,
		     -1.6148268077597137};

		res = solp::solve(c, A);
		CHECK_THAT(res.x,
		           Catch::Matchers::Approx(
		               std::vector<double>{1.2428886754515412e-14, 1.4602235506683697e-14,
		                                   1.087548225133841, 4.280467293539201, 2.532235308407725})
		               .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x,
		           Catch::Matchers::Approx(
		               std::vector<double>{1.2428886754515412e-14, 1.4602235506683697e-14,
		                                   1.087548225133841, 4.280467293539201, 2.532235308407725})
		               .margin(1e-10));
		A = {{{-2.1229506979348813, 1.1247560527249487, 0.11206079121667753, 0.5191412258690565,
		       -0.21094480414911052},
		      -0.299608422895751},
		     {{-0.9748570469283102, 0.699210125474775, 1.0161952005867616, -0.19765139112905816,
		       0.3419888237925572},
		      -0.9749809658136417},
		     {{-0.2474150480350353, 1.5920583406405593, 0.5629199991509807, 0.09105966580930083,
		       0.8243863386250445},
		      1.9305013511688713}};
		c = {-0.03639709312351117, -1.4702331869779892, -0.697367233920843, -1.5426604907483616,
		     -1.3784166691480997};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{2.444473416455996, 1.1827355459118378e-14,
		                                          3.0879880508533666, 8.752619734254298,
		                                          1.7152405688541864e-15})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{2.444473416455996, 1.1827355459118378e-14,
		                                          3.0879880508533666, 8.752619734254298,
		                                          1.7152405688541864e-15})
		                      .margin(1e-10));
		A = {{{-0.6579260925367952, 0.9688826385630508, 0.22558166356880352, 1.3891453156779274,
		       2.014060154918468},
		      0.43310795315134365},
		     {{-0.30676577602700456, -0.40630313044506255, -0.8640449911023695,
		       -0.14357951171632055, -0.3820254489503836},
		      -0.4059417271884834},
		     {{0.35950439957101016, -0.14456681693373594, -0.3615992807816198, 1.0645851361278518,
		       -0.9378802311514517},
		      0.7243685048699644}};
		c = {-0.5715553477229276, -1.5869747430909384, -1.1316780531409278, -2.7784357740841705,
		     -0.9705893943342215};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.7380759932880826, 0.276224944275983,
		                                          4.3307114104937886e-16, 0.4686895224102615,
		                                          5.962156960180148e-16})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.7380759932880826, 0.276224944275983,
		                                          4.3307114104937886e-16, 0.4686895224102615,
		                                          5.962156960180148e-16})
		                      .margin(1e-10));
		A = {{{-0.06205312579833403, 1.2591671296108138, 0.7041110221415822, -1.4956795162570162,
		       2.5263682403559984},
		      0.4608144771488305},
		     {{1.7699213881967337, -0.1682142227670741, 0.37791010173847506, 1.3243587499958391,
		       -0.17220079269688263},
		      0.9237965603139469},
		     {{0.7303517903770194, 1.1045784735714765, -1.014825907734441, -0.6023318535828621,
		       0.9214083978105813},
		      -0.13256801465371804}};
		c = {-0.3878309049307363, -0.642805482097095, -0.7231263054371574, -0.15133409173775483,
		     -1.247897881691722};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{8.677865580158573e-14, 0.7718876849122203,
		                                          0.6002415750072573, 0.6243034167439379,
		                                          1.8702964868896872e-14})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{8.677865580158573e-14, 0.7718876849122203,
		                                          0.6002415750072573, 0.6243034167439379,
		                                          1.8702964868896872e-14})
		                      .margin(1e-10));
		A = {{{1.648504010268179, -1.5500141893581478, -0.45582534779936884, 1.4261587520192662,
		       0.9361291483110824},
		      -0.13043973378332732},
		     {{0.6783800988404703, 0.8326507394644783, 0.3270662091210221, 1.6315974275322715,
		       0.3777591697307179},
		      1.821915097860406},
		     {{0.23986710589527857, 0.15895867412564327, 0.19286395555038602, -1.1570172808158679,
		       0.7706730544633433},
		      -0.07565047058842289}};
		c = {-1.3399893612378073, -2.369731012981332, -1.608765316588961, -0.3724129685797905,
		     -0.6900216418737621};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.17318176301650348, 4.067794976920419e-13,
		                                          2.5694053532478494, 0.5295830657647007,
		                                          6.96524102541946e-13})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.17318176301650348, 4.067794976920419e-13,
		                                          2.5694053532478494, 0.5295830657647007,
		                                          6.96524102541946e-13})
		                      .margin(1e-10));
		A = {{{0.4635397652282402, 0.2384806348807379, -1.6784441780221098, -0.7617099416541063,
		       0.5748523617353566},
		      -0.16675427628187656},
		     {{-1.1036364710364543, 0.2960664237320644, -0.77198617885464, 0.5249620090383947,
		       0.9313190422106503},
		      0.09245470826950498},
		     {{-1.8261207806653905, -1.2909857812400287, 1.4526330359826523, -1.7305848206615102,
		       -0.1318745917471983},
		      -2.17123686809705}};
		c = {-0.9927971892738392, -1.317299107757328, -2.208289440246549, -4.517932247396302,
		     -1.0872465596383116};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{3.4258016640255735, 3.689325359591416e-14,
		                                          3.4490282594302775, 2.1039614175848438e-14,
		                                          7.017892062499451})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{3.4258016640255735, 3.689325359591416e-14,
		                                          3.4490282594302775, 2.1039614175848438e-14,
		                                          7.017892062499451})
		                      .margin(1e-10));
		A = {{{-0.7554627263656334, -1.2012015190173893, 0.5232617386880769, -0.5375833685580619,
		       0.09920486253150243},
		      -1.9585489551365387},
		     {{1.5762989726277177, 0.5023282400747796, -0.8622669997532367, 0.16066118981977281,
		       -0.9526449528153877},
		      -1.4464210639833286},
		     {{1.6085221559487237, -0.5615787496032209, 0.20727074697361864, 0.307732574679432,
		       0.15925046837370244},
		      -0.4523502755690917}};
		c = {-0.3679874005492982, -2.9082887804527493, -0.3483962780984753, -0.43680734996090426,
		     -0.0037166720266386035};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.31497694993585873, 3.234887287158863,
		                                          4.137806671701706, 2.4357829069706905e-13,
		                                          2.161610498978043e-13})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.31497694993585873, 3.234887287158863,
		                                          4.137806671701706, 2.4357829069706905e-13,
		                                          2.161610498978043e-13})
		                      .margin(1e-10));
		A = {{{1.7406294458953309, -0.2934850548893775, 0.917221542115856, -0.05704286766218815,
		       0.8767267736904524},
		      0.5882249291179367},
		     {{-1.8269113783045177, -0.40318830684953333, 0.9494055237932187, -0.16325494883317873,
		       -0.08645528271104713},
		      0.2125870464375366},
		     {{-0.43046191188579297, 1.149379383367124, 0.2975143539549459, 0.04402227617534797,
		       0.6430545453392927},
		      1.5470314969908445}};
		c = {-3.856445499987714, -0.504486690647339, -0.9211618216751525, -0.06546588919587343,
		     -0.5273911609389018};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{8.859790584698167e-14, 0.9439097321954861,
		                                          1.1238318210382785, 2.902280934914369,
		                                          6.884171446937153e-13})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{8.859790584698167e-14, 0.9439097321954861,
		                                          1.1238318210382785, 2.902280934914369,
		                                          6.884171446937153e-13})
		                      .margin(1e-10));
		A = {{{-0.4900679256527415, 0.60745272915306, 1.919989755134842, -1.273889719662718,
		       0.4328756012909587},
		      -0.7096699064189013},
		     {{0.04160665963720389, 1.14194538826727, 0.858413027971515, -0.08208935427480223,
		       0.44800406191822506},
		      2.0233909866676516},
		     {{-0.3995448900301614, -0.12667725628910567, -0.5669498351017513, -0.681252865869426,
		       0.5712954617991547},
		      0.43311850150243736}};
		c = {-1.717369290146393, -0.26237038815790387, -0.39441232550726496, -1.2322360296820885,
		     -0.49882944303953114};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{4.37783085564407, 1.247860772380744e-15,
		                                          2.573946264669883e-15, 0.2873859220091555,
		                                          4.162541261541982})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{4.37783085564407, 1.247860772380744e-15,
		                                          2.573946264669883e-15, 0.2873859220091555,
		                                          4.162541261541982})
		                      .margin(1e-10));
		A = {{{-1.6923704374741084, 0.7293463462804262, 0.6991361537186938, -0.29875960056993595,
		       -1.1022301909070906},
		      -0.9402702359572048},
		     {{-0.024549423642379036, -0.8358560674816213, -0.9420935888731159,
		       -0.10321275146170758, -1.0513903986600646},
		      -0.6599427051023377},
		     {{0.24664895525244618, 0.6079925094063973, -0.8396324471731914, -1.3682450953383907,
		       1.561279598955807},
		      0.21301716742988736}};
		c = {-0.39040193133646695, -2.446364918519491, -0.22440119391637528, -1.8552768112950326,
		     -1.1917928983829673};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.8134306742548774, 0.7268838276012121,
		                                          1.4042799646089431e-13, 0.3139456391248537,
		                                          7.309013588893323e-15})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.8134306742548774, 0.7268838276012121,
		                                          1.4042799646089431e-13, 0.3139456391248537,
		                                          7.309013588893323e-15})
		                      .margin(1e-10));
		A = {{{-0.06614500333656964, -0.371280521266482, -1.066002182367057, 0.7578491902085328,
		       0.03575972314082666},
		      -0.5626163906983588},
		     {{1.9211159753097007, -0.8160373534561223, 0.11800342711397607, -1.8293046667088806,
		       -0.2131620447621256},
		      -0.7334394316151149},
		     {{-0.3636981581416262, 0.6420587968966874, 0.0715446133109135, 0.6849869375768505,
		       1.0001092804185812},
		      1.68276872371183}};
		c = {-0.9932211907857259, -1.50771318638362, -1.9075595835865395, -1.6950650500020434,
		     -0.1816143132617333};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{2.985046613690312, 7.652020519917156e-16,
		                                          2.993539935842807, 3.7289076357761606,
		                                          2.958538428329724e-15})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{2.985046613690312, 7.652020519917156e-16,
		                                          2.993539935842807, 3.7289076357761606,
		                                          2.958538428329724e-15})
		                      .margin(1e-10));
		A = {{{0.5286091561263714, 0.2258328315733809, 1.2220219495107913, -0.024800096896376096,
		       0.6148501022042807},
		      0.08842833131326151},
		     {{1.0967596917662308, 0.8798244233299737, -0.6854243471043139, -0.8442875902421967,
		       1.618855096662676},
		      -0.5043717027430662},
		     {{-0.6460473023938864, 0.7634930642518774, 2.6300768021995724, -0.8505031240966652,
		       0.37401451492246307},
		      -0.7495827037725645}};
		c = {-1.2364651699613198, -0.27424999887393386, -2.050249114911028, -0.42546504362525245,
		     -0.1994751214538893};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.12316125966009131, 0.21054851655621948,
		                                          3.4595177322117615e-14, 0.9767948085682512,
		                                          4.157201740325668e-16})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.12316125966009131, 0.21054851655621948,
		                                          3.4595177322117615e-14, 0.9767948085682512,
		                                          4.157201740325668e-16})
		                      .margin(1e-10));
		A = {{{0.3200319320927313, 2.079176664795037, -0.9074659814202977, -0.19240420779590675,
		       -1.212515744488909},
		      0.3276231792347814},
		     {{-0.08059851615012545, 1.5932736159500267, 0.5687223991204718, -0.11448704558920082,
		       0.25163024881989055},
		      0.27919649251421025},
		     {{-1.21085563794359, -0.3937337116943893, 0.08525257457038693, 0.09942198670854183,
		       -1.5306162443986169},
		      -0.3770512062727785}};
		c = {-0.2377260803241611, -0.694771896191222, -0.7467512446163371, -0.23988542265621887,
		     -0.6777880705357595};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.6992300740980237, 0.7687905030554187,
		                                          2.9031745983523058e-12, 7.768042412066649,
		                                          4.146865715129398e-12})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.6992300740980237, 0.7687905030554187,
		                                          2.9031745983523058e-12, 7.768042412066649,
		                                          4.146865715129398e-12})
		                      .margin(1e-10));
		A = {{{-0.5888131995338436, -0.16615313560795222, -1.3814116506822827, -0.6126385603685591,
		       -0.38128986980829505},
		      -0.9090323262520912},
		     {{-1.2489489330728745, -0.3302378932645443, -0.8348071635345082, 1.2353823920094769,
		       -0.24380379713912192},
		      -0.14517024419321808},
		     {{-0.18954566825657565, 0.4280281070213674, 0.5569683168406292, -1.736241804300151,
		       -0.3767841091075349},
		      -0.5363325211989141}};
		c = {-0.12120916206887648, -0.8251093178009772, -1.026088115879211, -4.349872111161412,
		     -0.21708526765448746};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.3492220821928267, 1.6946481313743587,
		                                          1.9088571606275546e-13, 0.6885538736818925,
		                                          3.127806408315616e-13})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{0.3492220821928267, 1.6946481313743587,
		                                          1.9088571606275546e-13, 0.6885538736818925,
		                                          3.127806408315616e-13})
		                      .margin(1e-10));
		A = {{{-0.5060765560786548, -0.6884461387207981, -0.2100005391102094, 1.0521534768386704,
		       0.9079040816376843},
		      0.8491152114704448},
		     {{-1.0932261824597196, 2.799707649086917, -0.32577632458502837, -1.1524157289595007,
		       0.8882319900487784},
		      -1.2288951969348896},
		     {{-0.36167245735435183, 2.1537195078396496, 0.8474083554815338, -0.1987198463087681,
		       1.5753068777322043},
		      0.8883941095724036}};
		c = {-0.5544821029384256, -0.03981119105799096, -0.09881987204031603, -0.8221446398553287,
		     -0.8732594144235148};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.146548175917544, 0.7773071683824412,
		                                          6.988738843853122e-14, 1.8671139958520535,
		                                          2.461083515894335e-14})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.146548175917544, 0.7773071683824412,
		                                          6.988738843853122e-14, 1.8671139958520535,
		                                          2.461083515894335e-14})
		                      .margin(1e-10));
		A = {{{0.7092143545622179, -1.9945001281616213, 1.32033622464675, 0.3636389892974749,
		       0.22262191536272832},
		      -0.5659416222474006},
		     {{-0.2271282264410064, -0.43270633483706405, 0.06134891966495237, 2.53977574157726,
		       -0.09095112992266872},
		      0.6139713903096113},
		     {{0.6340191598968465, 0.20032932990780947, 0.814561097845266, -0.47976156907190626,
		       1.9774092566582173},
		      0.8439004981140976}};
		c = {-1.5871901831559339, -1.0107923834453412, -1.613348593714565, -2.3970438798462443,
		     -2.3477795657086875};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.4447217059055537, 0.8928364843875601,
		                                          3.595616918666658e-14, 0.5230558155563502,
		                                          3.25877443487196e-15})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.4447217059055537, 0.8928364843875601,
		                                          3.595616918666658e-14, 0.5230558155563502,
		                                          3.25877443487196e-15})
		                      .margin(1e-10));
		A = {{{0.9534844479483552, 0.10492211435684316, 2.0956063238756975, 1.365593568200674,
		       -0.9189066515951662},
		      1.4171249038478002},
		     {{-0.7603077967936598, 2.4743527016510405, -0.9658157281613983, 0.7613229602594552,
		       -0.13255425541169613},
		      1.9252207878322338},
		     {{1.32776962617422, -0.1563747654206287, -0.3366344180134548, -0.6210630831434272,
		       0.7305708761279811},
		      -0.6479254272370866}};
		c = {-1.4738948716447668, -2.2779774523444334, -0.5804528253603519, -1.0289268132934553,
		     -0.48039386962361236};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{2.6072153111879094e-14, 0.4471771419200175,
		                                          1.7055712615136932e-12, 1.1005762024198946,
		                                          0.14444737176144165})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{2.6072153111879094e-14, 0.4471771419200175,
		                                          1.7055712615136932e-12, 1.1005762024198946,
		                                          0.14444737176144165})
		                      .margin(1e-10));
		A = {{{0.17506745883744323, -2.118450634640296, -0.30916851438148, -0.3684154413875956,
		       -0.36876353620555047},
		      -0.47929739755443296},
		     {{-0.6302257476306048, -1.3431925430884397, 0.7580380514217575, -0.5838408439896756,
		       -1.0237014524008545},
		      -1.3455077280199745},
		     {{-0.7599342678179074, -0.47232323974695456, 0.1086471247130269, 0.6683389863604884,
		       -0.953179498015071},
		      -3.392299993422376}};
		c = {-1.5026925773118618, -0.751707836317405, -0.21672711359774186, -1.6830344150190304,
		     -0.16007018194980294};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{5.801188938827003, 1.2238088544428907e-15,
		                                          3.7496878009357144, 0.9109590934545803,
		                                          7.590798821275525e-16})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{5.801188938827003, 1.2238088544428907e-15,
		                                          3.7496878009357144, 0.9109590934545803,
		                                          7.590798821275525e-16})
		                      .margin(1e-10));
		A = {{{-0.5879654867902303, 0.03715693096638431, 1.4580264070696392, -1.1097580651195995,
		       0.07803666995596867},
		      0.18658995305731357},
		     {{-1.133199108958105, 0.8804535686791789, 0.08353647914398218, -0.8155270667688506,
		       -0.06454335599469081},
		      0.49482728146995103},
		     {{-0.449542894184495, -0.7093248764535455, -0.6432510677527673, 0.7852553330162274,
		       -0.7189093472697888},
		      -1.2370578865593997}};
		c = {-0.10329459983181837, -1.2571717384691796, -0.5962023422141017, -0.32791431228075124,
		     -2.070682036525989};

		res = solp::solve(c, A);
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.163358792346276e-13, 2.774499392475378,
		                                          2.033915840440211, 2.596966875067595,
		                                          3.6235461786783466e-12})
		                      .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x, Catch::Matchers::Approx(
		                      std::vector<double>{1.163358792346276e-13, 2.774499392475378,
		                                          2.033915840440211, 2.596966875067595,
		                                          3.6235461786783466e-12})
		                      .margin(1e-10));
	}
	SECTION("valid 10x20: 1") {
		solp::result res;
		std::vector<solp::constraint> A;
		std::vector<double> c;

		A = {
		    {{-0.668168392414731,    0.33833954406441624,  -1.1891311720915034,
		      -0.020724087806338262, 0.36009689498953656,  1.0823883437261015,
		      0.4390854744737148,    0.6673156112247908,   -0.19295472328952074,
		      -0.04514190555504794,  -0.4575970853321496,  0.2687020765507362,
		      0.5414130754668174,    0.5603662494023803,   0.4634231333943394,
		      1.297806356847649,     -0.23090957028002293, 1.712177026802007,
		      0.24842765359160943,   -0.7386830366632035},
		     1.4186510635368088},
		    {{0.3304316669243451,  -0.057805761674759856, -0.030582788924638227,
		      0.9412934634210716,  -0.5984822339206792,   -0.9803550240951523,
		      0.20702078768536344, -0.6550219154568017,   0.13201748064336877,
		      0.790021876756803,   -1.3689039570782306,   0.9380483982640455,
		      0.48473135379405496, 0.24333969168547884,   -1.4307051972621485,
		      -1.0672822001588467, -0.7570881434918421,   -0.47501052597558235,
		      0.08076917008981778, 1.2956811543494335},
		     -0.977627778359643},
		    {{0.5300829312296075,  -0.42463481893200783, -0.600746567457596,  1.3769871522704034,
		      0.4140109583585451,  1.0277614960263626,   -0.8248613843788873, 0.257110747176871,
		      -0.7096899935103032, -0.15200265994415643, -0.6228904340536274, -0.14009813622041362,
		      -0.1943059718279962, -1.3681164235339733,  -1.1639925581657329, 0.43082369850194985,
		      0.13390693908334175, -0.8116710012931109,  -0.5282785400845595, 0.4628006284791898},
		     -0.41956681894077835},
		    {{1.3132368927127924,   0.8331752837274283,   -0.2018923016812237, 0.09331082127552175,
		      -1.0099724440591364,  0.4170527224201579,   0.43320809442141806, -0.2000631473010724,
		      -0.48192479696009727, 0.05267559467482103,  0.5904321509887832,  0.41948768757965516,
		      1.438053867513789,    -0.20916700790659085, 0.14054924808668126, 0.8455461447568036,
		      -0.1576862374496733,  0.7914052892916892,   0.5603117349434806,  0.6225966143911382},
		     0.4297143377766913},
		    {{-0.6495120928454484, 1.6057735424225166,  -1.4565155752067793, -0.159246711356188,
		      0.9452735873374505,  -1.1509324202009454, 1.1862341679545783,  -0.9232008788683962,
		      -1.4868230555043551, 1.2887068569720181,  -0.5039800526138359, -0.9293570940183379,
		      1.4114164158624198,  -1.3048023482540123, -0.5259607274517634, 0.14749256950246573,
		      -0.6388627074833266, -0.4544603295696204, 1.6006818349954324,  1.8981077366688022},
		     -1.0633278593756592},
		    {{1.295222719563133,    -0.6770508701809396,  -0.034313247545439525,
		      0.042440770135508586, 0.05936653572380818,  0.11252828915448944,
		      0.1721530411394349,   0.2323742896163014,   1.0071391189050438,
		      1.1618843909681862,   2.073810589437553,    -1.5517368505731626,
		      0.579292555576571,    -1.5301367698028485,  -0.9412553832484578,
		      1.5477662265647627,   -0.15888666552949837, -0.514124689679728,
		      -0.16075779409348975, 0.5885755307209505},
		     0.3911823483175026},
		    {{0.7499521455767931,   -1.0819777171660403, 0.28675811438297694, -0.8426261860312148,
		      -0.44664349350875915, -0.7166017954711743, 1.5151894661777392,  -0.3630546371754677,
		      -1.2952378585916415,  0.22331305993433367, 0.7022958165659997,  1.2997991684402541,
		      -0.21858859850677986, -0.3559314120562791, 0.9324097751399443,  -1.1729715722974332,
		      0.8698990657903873,   0.35153126861258743, 0.5347394636101277,  0.5843375267298728},
		     -0.07478593890424948},
		    {{-0.9044496911332494,  0.2044183079364338,  -1.1293611736724576, 1.072630088776037,
		      -0.5822884336372125,  1.2378179000905758,  0.28936776897836136, -1.00458367408904,
		      -1.032532359327127,   -0.9010717929767612, -0.5148781639034627, 0.4178542398903599,
		      -2.0488327587590907,  -0.98974438834615,   -0.3382941895532951, 1.5038265027762627,
		      -0.25820895131257615, -0.1545956417824247, -1.6558270256983303, -0.09355458630972056},
		     -0.9993607679742841},
		    {{-1.0900810076467862, 0.7780081759964306,  2.168953917143037,    0.5874821470270757,
		      -1.1014442155661777, 0.6476220758912674,  -0.8646058847556326,  -0.31915400222320733,
		      0.13791101167619,    1.2473257791957864,  0.10516138102194872,  0.5986577447095577,
		      0.06652346504501853, 0.6185915726464108,  -0.10275153647081395, 1.2281802918159905,
		      -1.4339200768321307, -0.7613863647301842, -1.1129081866222268,  -0.6932907786286131},
		     0.344402998355128},
		    {{-0.9792848440196051, 0.4943834060614626,  -0.6510017459079749, -0.03641300330021114,
		      -0.5350659688127838, -0.7569305523643012, 0.10019488781709911, -1.3082509744933704,
		      -1.0891142916606622, -1.6640189229355347, -0.7002798797619749, -0.0759274001219628,
		      1.1599098614759071,  -0.8365039305724737, 1.5821044126723052,  -0.12717983073781813,
		      0.4336561379391885,  0.16940849103817449, 0.5724648423426227,  1.8298932276447775},
		     0.9736811548346255}};
		c = {-1.144269863333168,  -0.4995002492956799,  -0.3104463790517552,  -2.6896674015883355,
		     -0.5300228364893828, -0.7203221022969241,  -0.07496281321342245, -0.07165862510092434,
		     -1.4190819611459935, -2.6883358371754564,  -1.0125136967324662,  -2.3030408979955146,
		     -1.4870111897649094, -0.13795872710864568, -0.06898290666065073, -2.8488530955800786,
		     -0.1762648573897022, -0.9919742354661241,  -0.268880809164881,   -0.7247371928990898};

		res = solp::solve(c, A);
		CHECK_THAT(res.x,
		           Catch::Matchers::Approx(
		               std::vector<double>{
		                   3.896510631386022e-14,  444.7778696640155,     493.4340513583464,
		                   1194.3410352520516,     496.6309527183004,     1.041405602477107e-13,
		                   831.4995259672367,      4.399100901636802e-14, 454.0831236956797,
		                   7.444973868229425e-14,  34.45405664081749,     8.593014294937335e-14,
		                   2.3191368798052728e-14, 8.983143688091297e-14, 361.0580673835251,
		                   4.525915957032498e-13,  611.4917664552496,     4.0193605009723636e-14,
		                   4.493077801285482e-14,  5.729492173687177})
		               .margin(1e-10));
		res = solp::solve(c, convert_to_sparse(A));
		CHECK_THAT(res.x,
		           Catch::Matchers::Approx(
		               std::vector<double>{
		                   3.896510631386022e-14,  444.7778696640155,     493.4340513583464,
		                   1194.3410352520516,     496.6309527183004,     1.041405602477107e-13,
		                   831.4995259672367,      4.399100901636802e-14, 454.0831236956797,
		                   7.444973868229425e-14,  34.45405664081749,     8.593014294937335e-14,
		                   2.3191368798052728e-14, 8.983143688091297e-14, 361.0580673835251,
		                   4.525915957032498e-13,  611.4917664552496,     4.0193605009723636e-14,
		                   4.493077801285482e-14,  5.729492173687177})
		               .margin(1e-10));
	}
	SECTION("unbounded 3x5: 5") {
		solp::result res;
		std::vector<solp::constraint> A;
		std::vector<double> c;

		A = {{{1.8138062360765954, -0.10345769879784678, -0.30524108484693124, -1.4047080028363064,
		       -0.3657502327869561},
		      -0.553788858223019},
		     {{-0.09727457054167257, 0.27513649837061943, -1.5588892716479097, -0.36878757736353346,
		       0.7465646519241211},
		      0.7133117199557338},
		     {{0.32795365141883737, 0.1500969624745362, 0.6712778984413997, -0.39802134706240005,
		       -0.8001051311776851},
		      0.890694859025176}};
		c = {-0.11403450230606776, -0.6967377815254693, -2.2393920399312335, -0.5517626156737868,
		     -0.2512541147336774};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
		A = {{{0.6200797978430743, -0.2033996226014052, -0.059779610141329056, -1.1121650700931296,
		       0.36987986790356947},
		      1.4953358154713354},
		     {{0.2429883175916833, -1.4556867003249072, 0.20459576646890704, 0.23629756579607422,
		       -0.20865627255886257},
		      -0.22142815602736465},
		     {{-0.8186010086781196, -0.27206544647653147, -0.5458545150969967, -1.2913903140323828,
		       1.2412921434032849},
		      0.5088971133321114}};
		c = {-0.5060209738131631, -0.33278497581361205, -0.1239740522255287, -3.2434027274531845,
		     -0.10097601076934724};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
		A = {{{-2.180563615516528, 2.0093611110098712, -0.9420067176566341, 1.2410591949476837,
		       0.06203229981088963},
		      -0.29649318181768847},
		     {{-0.5129286473282584, 0.9645683437465811, -0.8506428052761513, 0.3195344811330106,
		       -0.30391525431557437},
		      -0.5792936834381981},
		     {{-0.6338898247564448, 1.3402024357279874, 0.2709544400487333, -0.2500297860134807,
		       -0.7414013672132351},
		      0.010216469951610619}};
		c = {-0.17530243485574354, -0.14203181493184422, -0.6910691496195667, -0.3978487943472648,
		     -1.2898059689005854};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
		A = {{{-1.1947797975852723, 0.8789097334831679, -0.047402238708040965, 0.8573951991901677,
		       -0.6879322934565911},
		      -0.9164343530881034},
		     {{0.4543345030871489, 0.46388956740956383, -0.36242649566159857, -0.37656040495305093,
		       -0.6898309604562726},
		      1.8120175502198936},
		     {{0.7394637393972663, -0.2346253759934255, 0.332629817832717, -1.0158257537477362,
		       -0.6514567292041978},
		      -2.1079693241511723}};
		c = {-0.19282488835710765, -0.9051578260480552, -0.9345677059464091, -0.5251532345302871,
		     -0.2240441320254764};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
		A = {{{-0.6902615929931529, -0.28518422421592654, 0.561169799038208, -0.22244848354595986,
		       0.10259032802505574},
		      -1.2523069324263796},
		     {{-1.3632470457552348, -0.5505031629499061, 0.9418570285502791, 0.4167126511821953,
		       1.5588051503008589},
		      1.1929949359697432},
		     {{-0.4624279885487197, -0.3520548440511586, 0.692372643432787, -1.3459591798416046,
		       -1.396778104289658},
		      -0.857846354341498}};
		c = {-1.8292867981835115, -0.8450715586230313, -0.7898233998245664, -0.3028741519108804,
		     -2.336401224204451};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::unbounded));
	}
	SECTION("infeasible 3x5: 5") {
		solp::result res;
		std::vector<solp::constraint> A;
		std::vector<double> c;

		A = {{{0.815129076450418, -1.1044773564376473, -0.02584447831903325, -0.6846947390015932,
		       0.7430288435789966},
		      -0.10177772571362137},
		     {{0.09277352640580934, -1.8108327894744252, 1.464235468396426, 2.1097369633767236,
		       0.5113024932649272},
		      -0.02700026720966046},
		     {{0.9214703398827807, -0.7961116266651391, 0.1557842881110251, 1.6264905331919433,
		       1.6839746642537838},
		      -0.5560973938588736}};
		c = {-2.0125787198828053, -0.24207965664314007, -0.15499059073684973, -2.705487261192865,
		     -2.2174385748812044};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
		A = {{{-1.535900442660834, -2.1329395688210764, -1.221418932522158, -0.051093734083192774,
		       -0.6269537688993571},
		      0.12212130862100888},
		     {{0.9085376770726842, -1.7701388292044449, 0.12711236101604625, 0.2025357810770882,
		       0.21938673238857817},
		      -0.033958848217310614},
		     {{-0.14195275498369772, 0.4712587234214657, -1.1216320166121092, 0.2348901045250824,
		       0.26607134216071515},
		      -0.41191233723239323}};
		c = {-2.441947468730249, -1.2814400334361533, -7.394836879242575, -0.9869777168523822,
		     -2.1390215573787645};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
		A = {{{0.1672836789588394, 1.3519339423925385, -0.47250918773108996, 1.1411815232824587,
		       -1.5711485520625494},
		      2.438157273726243},
		     {{0.7742352838441771, 2.021104418893968, 1.2699766367797813, -0.10877379971477398,
		       0.39477310299398644},
		      0.171933893555252},
		     {{-0.933607375187656, 2.026325343907229, 0.5663884110065389, -0.20479537947109483,
		       -1.2215924125456614},
		      0.014162801631815776}};
		c = {-0.6151430886916432, -0.9813403251465322, -1.9084669778878391, -2.50589056133995,
		     -0.455911506114068};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
		A = {{{0.04381550231716187, 0.270694885532037, 0.81426120192361, 0.9521248425597889,
		       0.08243267918019744},
		      -0.3068688425577316},
		     {{-0.9141411261215726, 0.9487647320749707, 0.11744009277983161, 1.9380796179542192,
		       -1.8633903838627592},
		      -0.0015586484979749383},
		     {{1.0584169244927333, 2.7829661529937257, -0.39380687578912427, 0.7951972810080031,
		       0.020864222051901162},
		      -0.9141682851012257}};
		c = {-1.3462102766669193, -1.8693432302451878, -0.38980837313216143, -1.8251333876667526,
		     -0.05882702130893178};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
		A = {{{-0.27723316568044515, -1.3754057309220669, -0.013984351192171323,
		       -0.5619588048946353, 1.2563571019858426},
		      1.8464388457827845},
		     {{0.09422639893980853, -0.6677699864085933, 0.1491686394343503, 1.8113621221052048,
		       -0.9075915721636062},
		      0.24424827128558896},
		     {{0.03250158861736595, 0.3223449857008541, -2.391686063330155, -1.0251039169864093,
		       -1.663143691620954},
		      -0.0595205567007816}};
		c = {-0.6822237310869042, -1.5149856409331646, -0.7058239192987755, -0.2638764472746797,
		     -2.9636148322298155};

		CHECK_THROWS_MATCHES(solp::solve(c, A), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
		CHECK_THROWS_MATCHES(solp::solve(c, convert_to_sparse(A)), solp::exception,
		                     MatchSolpException(solp::exception::type::infeasible));
	}
}
